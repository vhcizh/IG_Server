# 워크플로우 이름
name: Deploy to EC2 with Docker Hub

on:
  push:
    branches: [ main ]  # main 브랜치에 push가 발생하면 실행

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 실행될 환경

    env: # 전역 환경변수 설정
      SPRING_PROFILES_ACTIVE: prod  # application-prod.properties 활성화
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

    steps:
      # 1. 코드 체크아웃 (GitHub 저장소에서 코드 가져오기)
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      # 3. gradlew에 실행 권한 추가
      - name: Add execute permission to gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 프로젝트 빌드 (환경 변수 설정 후 빌드 수행)
      - name: Build with Gradle
        run: ./gradlew build -x test # 테스트 제외하고 빌드

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          docker build --build-arg SPRING_PROFILES_ACTIVE="${{ env.SPRING_PROFILES_ACTIVE }}" \
                 --build-arg DB_URL="${{ env.DB_URL }}" \
                 --build-arg DB_USERNAME="${{ env.DB_USERNAME }}" \
                 --build-arg DB_PASSWORD="${{ env.DB_PASSWORD }}" \
                 --build-arg MAIL_HOST="${{ env.MAIL_HOST }}" \
                 --build-arg MAIL_PORT="${{ env.MAIL_PORT }}" \
                 --build-arg MAIL_USERNAME="${{ env.MAIL_USERNAME }}" \
                 --build-arg MAIL_PASSWORD="${{ env.MAIL_PASSWORD }}" \
                 -t ${{ env.DOCKER_HUB_USERNAME }}/shimturo:latest .
          docker push ${{ env.DOCKER_HUB_USERNAME }}/shimturo:latest

      # 7. EC2에 배포
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            docker pull $DOCKER_HUB_USERNAME/shimturo:latest
            docker stop shimturo || true
            docker rm shimturo || true
            docker run -d --name shimturo -p 8080:8080 \
              --restart unless-stopped \
              $DOCKER_HUB_USERNAME/shimturo:latest